// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingSystemAPI.Data;

#nullable disable

namespace ParkingSystemAPI.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    partial class ParkingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParkingSystemAPI.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DurationHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("bit");

                    b.Property<int>("ParkingSlotId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkingSlotId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("IssuedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParkingSlotId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("IssuedByUserId");

                    b.HasIndex("ParkingSlotId");

                    b.HasIndex("UserId");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.ParkingSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("HourlyRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SlotNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SlotType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SlotNumber")
                        .IsUnique();

                    b.ToTable("ParkingSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A01",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A01",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A02",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A02",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A03",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A03",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A04",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A04",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A05",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A05",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A06",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A06",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A07",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A07",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A08",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A08",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A09",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A09",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A10",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A10",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A11",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A11",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A12",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A12",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A13",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A13",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A14",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A14",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A15",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A15",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A16",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A16",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A17",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A17",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A18",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A18",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A19",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A19",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot A20",
                            HourlyRate = 5.00m,
                            IsActive = true,
                            SlotNumber = "A20",
                            SlotType = "Regular",
                            Zone = "A"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B01",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B01",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B02",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B02",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B03",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B03",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B04",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B04",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B05",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B05",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B06",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B06",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B07",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B07",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B08",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B08",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B09",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B09",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B10",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B10",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B11",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B11",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B12",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B12",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B13",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B13",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B14",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B14",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular parking slot B15",
                            HourlyRate = 4.50m,
                            IsActive = true,
                            SlotNumber = "B15",
                            SlotType = "Regular",
                            Zone = "B"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "VIP parking slot VIP01",
                            HourlyRate = 10.00m,
                            IsActive = true,
                            SlotNumber = "VIP01",
                            SlotType = "VIP",
                            Zone = "VIP"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "VIP parking slot VIP02",
                            HourlyRate = 10.00m,
                            IsActive = true,
                            SlotNumber = "VIP02",
                            SlotType = "VIP",
                            Zone = "VIP"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "VIP parking slot VIP03",
                            HourlyRate = 10.00m,
                            IsActive = true,
                            SlotNumber = "VIP03",
                            SlotType = "VIP",
                            Zone = "VIP"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "VIP parking slot VIP04",
                            HourlyRate = 10.00m,
                            IsActive = true,
                            SlotNumber = "VIP04",
                            SlotType = "VIP",
                            Zone = "VIP"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "VIP parking slot VIP05",
                            HourlyRate = 10.00m,
                            IsActive = true,
                            SlotNumber = "VIP05",
                            SlotType = "VIP",
                            Zone = "VIP"
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Disabled parking slot D01",
                            HourlyRate = 3.00m,
                            IsActive = true,
                            SlotNumber = "D01",
                            SlotType = "Disabled",
                            Zone = "D"
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Disabled parking slot D02",
                            HourlyRate = 3.00m,
                            IsActive = true,
                            SlotNumber = "D02",
                            SlotType = "Disabled",
                            Zone = "D"
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Disabled parking slot D03",
                            HourlyRate = 3.00m,
                            IsActive = true,
                            SlotNumber = "D03",
                            SlotType = "Disabled",
                            Zone = "D"
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Electric vehicle parking slot E01",
                            HourlyRate = 6.00m,
                            IsActive = true,
                            SlotNumber = "E01",
                            SlotType = "Electric",
                            Zone = "E"
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Electric vehicle parking slot E02",
                            HourlyRate = 6.00m,
                            IsActive = true,
                            SlotNumber = "E02",
                            SlotType = "Electric",
                            Zone = "E"
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Electric vehicle parking slot E03",
                            HourlyRate = 6.00m,
                            IsActive = true,
                            SlotNumber = "E03",
                            SlotType = "Electric",
                            Zone = "E"
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Electric vehicle parking slot E04",
                            HourlyRate = 6.00m,
                            IsActive = true,
                            SlotNumber = "E04",
                            SlotType = "Electric",
                            Zone = "E"
                        });
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("PaymentDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@parking.com",
                            FirstName = "Admin",
                            LastName = "User",
                            PasswordHash = "$2a$11$r3X5J7q9S1t8V2wB6yZ8KuY7N2vC1dF3gH4jK5L6M7N8B9V0C1X2Y3Z4A5B6C7D8E",
                            PhoneNumber = "1234567890",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "security@parking.com",
                            FirstName = "Security",
                            LastName = "Guard",
                            PasswordHash = "$2a$11$s4Y6K8r0T2u9W3xC7yA9LvZ8N3wD1eF4gH5jK6L7M8N9B0C1X2Y3Z4A5B6C7D8F",
                            PhoneNumber = "1234567891",
                            Role = "Security",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.Booking", b =>
                {
                    b.HasOne("ParkingSystemAPI.Models.ParkingSlot", "ParkingSlot")
                        .WithMany("Bookings")
                        .HasForeignKey("ParkingSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingSystemAPI.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingSlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.Fine", b =>
                {
                    b.HasOne("ParkingSystemAPI.Models.Booking", "Booking")
                        .WithMany("Fines")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ParkingSystemAPI.Models.User", "IssuedByUser")
                        .WithMany("IssuedFines")
                        .HasForeignKey("IssuedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParkingSystemAPI.Models.ParkingSlot", "ParkingSlot")
                        .WithMany("Fines")
                        .HasForeignKey("ParkingSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParkingSystemAPI.Models.User", "User")
                        .WithMany("ReceivedFines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Booking");

                    b.Navigation("IssuedByUser");

                    b.Navigation("ParkingSlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.Notification", b =>
                {
                    b.HasOne("ParkingSystemAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.Payment", b =>
                {
                    b.HasOne("ParkingSystemAPI.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.Booking", b =>
                {
                    b.Navigation("Fines");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.ParkingSlot", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Fines");
                });

            modelBuilder.Entity("ParkingSystemAPI.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("IssuedFines");

                    b.Navigation("ReceivedFines");
                });
#pragma warning restore 612, 618
        }
    }
}
